Alias:
  git config alias.st status
  git config alias.lg "log --pretty=oneline --graph --decorate --all"
  git config alias.st "status -s"
  git log --oneline --decorate --all --graph
  git remote show origin (Find the remote repository URLs)
  git remote -v (Get remote repository URL)
  git remote -vv (Same as above, but verbose)
  
Common Workflow:
  git clone URL
  git add .  (Add all files to staging area)
  git commit -m "comment" (Commit changes in staging to the local repo)
  git commit --amend -m "New commit message" (Ammend the last commit with a new comment)
  git checkout foo.txt (Abort changes in working area for file foo.txt)
  git checkout . (Abort changes in working area for all files)
  git reset -- foo.txt (Abort changes in staging area for file foo.txt)
  git reset . (Abort changes for all files in the staging area)
  git reset --hard HEAD~1 (Undo last commit)
  git reset --hard 0d1d7fc32 (Go to a previous commit. The later commits are lost)
  git revert HEAD (Revert the previous commit)
  git rm file1.txt followed by  git commit -m "remove file1.txt" (Remove file1.txt from git repo)
  git rm --cached file1.txt followed by git commit -m "remove file1.txt" (Remove file1.txt from git repo, but keep in workdir)

  git remote (List all remotes)
  git config --get remote.origin.url (Get the remote URL from which this repo was cloned)
  git checkout -b branch_name  (Create local branch)
  git checkout mybranch (switch to mybranch)
  git checkout origin/master (Checkout the remote tracking branch on the local machine)
  git branch branch_name sha1_of_commit (Create branch from a commit)
  git checkout -b mybranch 0d1d7fc32 (Create a branch mybranch on commit 0d1d7fc32 and checkout the branch) 
  git checkout 0d1d7fc32 (Checkout specific commit. Will be headless)
  git branch -a (List all remote branches)
  git branch -d <mybranch> (Delete local branch mybranch)
  git branch -D <branch> (Force delete the specified branch, even if it has unmerged changes.)
  git branch -m <mybranch> (Rename the current branch to <mybranch>.)
  
  git tag <mytag> (Create tag mytag>
  git tag -d <mytag> (Delete tag mytag>
  
  git fetch (Fetch the latest changes and branches from remote origin)
  git fetch <remote> (Fetch all of the branches from the repository)
  git fetch <remote> <branch> (Same as the above command, but only fetch the specified branch.)
  git fetch --all (A power move which fetches all registered remotes and their branches)
  git fetch --dry-run (The --dry-run option will perform a demo run of the command.)
  
  git merge origin/master (Merge the remote cached branch to the local branch -- fetch changes before merge)
  git merge mybranch --allow-unrelated-histories (merge unrelated branche mybranch with different history)
  git merge --ff <mybranch> (Merge branch mybranch into current branh with fast forward)
  git merge --ff-only  <mybranch> (Merge branch mybranch into current branh with fast forward only)
  git merge --no-ff  <mybranch> (Merge branch mybranch into current branh without fast forward)
  git merge --abort  (Abort a merge)
  git merge --no-commit --no-ff $BRANCH (Do a dry run for a merge)
  git diff --cached (To examine the staged changes)
  git rebase master // Rebase the current branch onto master
  git rebase master mybranch // Rebase the mybranch branch onto master
  
  git pull  (git fetch <remote> followed by git merge origin/<current-branch>)
  git pull origin master
  git pull --rebase <remote> (Same as the previous pull but will rebase instead of merge)
  git pull origin master --allow-unrelated-histories (Allow unrelated repo to be pulled)
  git push <remote-name> <branch-name> (Create remote branch by pushing a local branch)
  git push --set-upstream origin new   (Push the new branch, set local branch to track the new remote)
  git push <remote_name> --delete <branch_name> (Delete remote branch e.g. git push origin --delete crazy-experiment)
  git push -u origin <mybranch> (push mybranch to origin)
  git push --all -u (Push all branches to remote. Use only for private repos)

  git stash
  git stash save "stash name"
  git stash list
  git stash pop
  git stash apply
  git stash apply stash@{2}
  git stash drop stash@{2}
  
  git difftool (Launch the git diff tool)
  git diff myfile.txt (Diff file in working dir and repo)
  git diff --cached myfile.txt (Diff file in staging and repo)
 
Revert the previous commit:
  git revert HEAD
  git commit
  
Revert the changes from previous 3 commits without making commit:
  git revert --no-commit HEAD~3..
  
Amend:
  git commit --amend
  git commit --amend --no-edit
  git commit --amend -m "New commit message"

Rebase:
git rebase master // Rebase the current branch onto master
git rebase --continue //Continue Rebase
git rebase --abort  //Abort Rebase

Stash:
  git stash
  git stash save "stash name"
  git stash list
  git stash pop
  git stash apply
  git stash apply stash@{2}
  git stash drop stash@{2}

Delete remote tags:
  git push --delete origin tagname
  git push origin :tagname
  
Push tag to remote:
  git push origin tagname
  
Rename tag:
  git tag new old
  git tag -d old
  git push origin :refs/tags/old
  git push --tags
  
List all remote:
 git remote
 
Add a additional remote reposirory:
  git remote add myorigin git@github.com:user/repo.git
 
Create the branch on your local machine and switch in this branch:
  git checkout -b branch_name
Create branch from commit:
  git branch branch_name sha1_of_commit
  
Push the branch to remote:
  git push origin branch_name
  
Rename other branch:
  git branch -m old new
Rename current branch:
  git branch -m new
  
Rename remote branch:
  git branch -m old new               # Rename branch locally    
  git push origin :old                 # Delete the old branch    
  git push --set-upstream origin new   # Push the new branch, set local branch to track the new remote
  
Delete a branch:
  git branch -D the_local_branch
  git push origin :the_remote_branch
  
 Undo last commit:
  git reset --hard HEAD~1
  
 Squash last n commits into one commit:
  git rebase -i HEAD~5
  git reset --soft HEAD~5
  git add .
  git commit -m "Update"
  git push -f origin master
